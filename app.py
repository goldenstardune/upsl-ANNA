import os
import streamlit as st
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

# Ustawienia bazy danych
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
Base = declarative_base()

# Model danych dla zagro≈ºe≈Ñ
class Risk(Base):
    __tablename__ = 'risks'
    id = Column(Integer, primary_key=True)
    description = Column(String)
    probability = Column(Integer)
    impact = Column(Integer)

# Utw√≥rz tabelƒô, je≈õli nie istnieje
Base.metadata.create_all(engine)

st.set_page_config(page_title="Analiza ryzyka", layout="wide")
st.title("üîê Analiza ryzyka system√≥w teleinformatycznych")

# Funkcja klasyfikujƒÖca poziom ryzyka
def klasyfikuj_ryzyko(poziom):
    if poziom <= 6:
        return "Niskie"
    elif poziom <= 14:
        return "≈örednie"
    else:
        return "Wysokie"

# Wczytanie danych do sesji z bazy danych
def fetch_risks():
    with Session() as session:
        risks = pd.read_sql(session.query(Risk).statement, session.bind)
    return risks

if "df" not in st.session_state:
    st.session_state.df = fetch_risks()

# ‚ûï Dodawanie nowego ryzyka
st.subheader("‚ûï Dodaj nowe zagro≈ºenie")
with st.form("add_risk_form"):
    name = st.text_input("Opis zagro≈ºenia")
    prob = st.slider("Prawdopodobie≈Ñstwo (1-5)", 1, 5, 3)
    impact = st.slider("Wp≈Çyw (1-5)", 1, 5, 3)
    submitted = st.form_submit_button("Dodaj")

    if submitted and name.strip() != "":
        new_risk = Risk(description=name, probability=prob, impact=impact)
        with Session() as session:
            session.add(new_risk)
            session.commit()
        st.session_state.df = fetch_risks()
        st.success("Zagro≈ºenie dodane.")

# ‚úèÔ∏è Edytuj ryzyka w interaktywnej tabeli
st.subheader("‚úèÔ∏è Edytuj macierz ryzyka")
edited_df = st.data_editor(
    st.session_state.df,
    num_rows="dynamic",
    use_container_width=True,
    key="risk_editor"
)

# Zapisz zmodyfikowanƒÖ tabelƒô do sesji
st.session_state.df = edited_df.copy()

# Oblicz poziom ryzyka i klasyfikacjƒô
st.session_state.df["Poziom ryzyka"] = st.session_state.df["Prawdopodobie≈Ñstwo"] * st.session_state.df["Wp≈Çyw"]
st.session_state.df["Klasyfikacja"] = st.session_state.df["Poziom ryzyka"].apply(klasyfikuj_ryzyko)

# üìã Filtrowanie
st.subheader("üìã Filtruj wed≈Çug poziomu ryzyka")
filt = st.radio("Poka≈º:", ["Wszystkie", "Niskie", "≈örednie", "Wysokie"], horizontal=True)

if filt != "Wszystkie":
    df_filtered = st.session_state.df[st.session_state.df["Klasyfikacja"] == filt]
else:
    df_filtered = st.session_state.df

# üé® Kolorowanie
def koloruj(val):
    if val == "Niskie":
        return "background-color: #d4edda"
    elif val == "≈örednie":
        return "background-color: #fff3cd"
    elif val == "Wysokie":
        return "background-color: #f8d7da"
    return ""

# üìä Wy≈õwietlenie
st.subheader("üìä Macierz ryzyka")
st.dataframe(
    df_filtered.style.applymap(koloruj, subset=["Klasyfikacja"]),
    use_container_width=True
)

# üì• Eksport do CSV
st.subheader("üì• Eksportuj dane")
if st.button("Eksportuj do CSV"):
    df_export = st.session_state.df.copy()
    
    csv = df_export.to_csv(index=False, encoding='utf-8', sep=';')  # U≈ºyj `;` jako separatora
    st.download_button(
        label="Pobierz plik CSV",
        data=csv,
        file_name='zagrozenia.csv',
        mime='text/csv',
    )
    
# ---------------------------------------------------------------------
# Modu≈Ç ISO/IEC 9126 - Ankieta
# ---------------------------------------------------------------------
st.header("üìä Modu≈Ç ISO/IEC 9126 - Ocena Jako≈õci Oprogramowania")

cechy_jakosci = {
    "Funkcjonalno≈õƒá": "Stopie≈Ñ, w jakim oprogramowanie spe≈Çnia okre≈õlone potrzeby u≈ºytkownika.",
    "Niezawodno≈õƒá": "Zdolno≈õƒá oprogramowania do utrzymania okre≈õlonego poziomu wydajno≈õci.",
    "U≈ºyteczno≈õƒá": "≈Åatwo≈õƒá u≈ºywania oprogramowania przez u≈ºytkownik√≥w.",
    "Efektywno≈õƒá": "Zasoby (czas, energia), jakie oprogramowanie zu≈ºywa podczas wykonywania zada≈Ñ.",
    "Utrzymywalno≈õƒá": "≈Åatwo≈õƒá modyfikowania, naprawiania i ulepszania oprogramowania.",
    "Przeno≈õno≈õƒá": "Zdolno≈õƒá oprogramowania do dzia≈Çania w r√≥≈ºnych ≈õrodowiskach."
}

# Inicjalizacja stanu sesji dla ocen
if "oceny" not in st.session_state:
    st.session_state.oceny = {cecha: 3 for cecha in cechy_jakosci}

st.subheader("Oce≈Ñ system (1-5) dla ka≈ºdej cechy:")
for cecha, opis in cechy_jakosci.items():
    st.write(f"**{cecha}**: {opis}")
    st.session_state.oceny[cecha] = st.slider(f"Ocena {cecha} (1-5)", 1, 5, st.session_state.oceny[cecha])

# Obliczenie ≈õrednich
srednie_oceny = {cecha: st.session_state.oceny[cecha] for cecha in cechy_jakosci}
df_oceny = pd.DataFrame([srednie_oceny])

st.subheader("Wyniki oceny:")
st.dataframe(df_oceny)

# Interpretacja wynik√≥w
st.subheader("Interpretacja:")
interpretacje = {
    "Funkcjonalno≈õƒá": {1: "Funkcjonalno≈õƒá wymaga znacznych poprawek.", 3: "Funkcjonalno≈õƒá jest zadowalajƒÖca, ale jest miejsce na ulepszenia.", 5: "Funkcjonalno≈õƒá jest na bardzo wysokim poziomie."},
    "Niezawodno≈õƒá": {1: "Niezawodno≈õƒá jest bardzo niska.", 3: "Niezawodno≈õƒá jest na ≈õrednim poziomie.", 5: "Niezawodno≈õƒá jest bardzo wysoka."},
    "U≈ºyteczno≈õƒá": {1: "U≈ºyteczno≈õƒá wymaga znacznych poprawek.", 3: "U≈ºyteczno≈õƒá jest zadowalajƒÖca.", 5: "U≈ºyteczno≈õƒá jest bardzo wysoka."},
    "Efektywno≈õƒá": {1: "Efektywno≈õƒá jest bardzo niska.", 3: "Efektywno≈õƒá jest na ≈õrednim poziomie.", 5: "Efektywno≈õƒá jest bardzo wysoka."},
    "Utrzymywalno≈õƒá": {1: "Utrzymywalno≈õƒá jest bardzo niska.", 3: "Utrzymywalno≈õƒá jest na ≈õrednim poziomie.", 5: "Utrzymywalno≈õƒá jest bardzo wysoka."},
    "Przeno≈õno≈õƒá": {1: "Przeno≈õno≈õƒá jest bardzo niska.", 3: "Przeno≈õno≈õƒá jest na ≈õrednim poziomie.", 5: "Przeno≈õno≈õƒá jest bardzo wysoka."}
}

for cecha, ocena in st.session_state.oceny.items():
    if ocena <= 2:
        st.warning(f"{cecha}: {interpretacje[cecha][1]}")
    elif ocena <= 4:
        st.info(f"{cecha}: {interpretacje[cecha][3]}")
    else:
        st.success(f"{cecha}: {interpretacje[cecha][5]}")

# ---------------------------------------------------------------------
# Modu≈Ç ISO/IEC 27001 - Ocena Zgodno≈õci
# ---------------------------------------------------------------------
st.header("üõ°Ô∏è Modu≈Ç ISO/IEC 27001 - Ocena Zgodno≈õci")

# Kontrole bezpiecze≈Ñstwa pogrupowane w obszary
kontrole_bezpieczenstwa = {
    "Organizacyjne (A.5)": ["Polityka bezpiecze≈Ñstwa informacji", "Organizacja bezpiecze≈Ñstwa informacji", "ZarzƒÖdzanie zasobami", "Bezpiecze≈Ñstwo zasob√≥w ludzkich"],
    "Ludzkie (A.6)": ["Zasady zatrudniania", "Szkolenia z zakresu bezpiecze≈Ñstwa", "ZarzƒÖdzanie dostƒôpem u≈ºytkownik√≥w", "Reagowanie na incydenty bezpiecze≈Ñstwa"],
    "Fizyczne (A.7)": ["Bezpiecze≈Ñstwo fizyczne obwod√≥w bezpiecze≈Ñstwa", "Kontrola dostƒôpu fizycznego", "Ochrona przed zagro≈ºeniami ≈õrodowiskowymi", "Bezpiecze≈Ñstwo sprzƒôtu"],
    "Techniczne (A.8)": ["ZarzƒÖdzanie to≈ºsamo≈õciƒÖ i dostƒôpem", "Szyfrowanie danych", "Monitoring i logowanie", "Ochrona przed z≈Ço≈õliwym oprogramowaniem"]
}

# Inicjalizacja stanu sesji dla ocen zgodno≈õci
if "oceny_zgodnosci" not in st.session_state:
    st.session_state.oceny_zgodnosci = {obszar: {kontrola: 3 for kontrola in kontrole_bezpieczenstwa[obszar]} for obszar in kontrole_bezpieczenstwa}

# Wyb√≥r obszaru
obszar = st.selectbox("Wybierz obszar zgodno≈õci z ISO/IEC 27001:", list(kontrole_bezpieczenstwa.keys()))

st.subheader(f"Oce≈Ñ poziom wdro≈ºenia kontroli w obszarze: {obszar}")

# Prezentacja i ocena kontroli
for kontrola in kontrole_bezpieczenstwa[obszar]:
    st.write(f"**Kontrola**: {kontrola}")
    st.session_state.oceny_zgodnosci[obszar][kontrola] = st.slider(f"Poziom wdro≈ºenia (1-5) dla '{kontrola}'", 1, 5, st.session_state.oceny_zgodnosci[obszar][kontrola])

# Obliczenie ≈õredniego poziomu dojrza≈Ço≈õci
oceny_obszaru = list(st.session_state.oceny_zgodnosci[obszar].values())
sredni_poziom = np.mean(oceny_obszaru)

st.subheader("Podsumowanie:")
st.metric(label=f"≈öredni poziom dojrza≈Ço≈õci w obszarze '{obszar}'", value=f"{sredni_poziom:.2f}")

# Interpretacja wyniku
st.subheader("Interpretacja:")
if sredni_poziom <= 2:
    st.error(f"≈öredni poziom dojrza≈Ço≈õci w obszarze '{obszar}' jest niski. Wymagane sƒÖ natychmiastowe dzia≈Çania naprawcze.")
elif sredni_poziom <= 4:
    st.warning(f"≈öredni poziom dojrza≈Ço≈õci w obszarze '{obszar}' jest ≈õredni. Rozwa≈º wdro≈ºenie dodatkowych kontroli.")
else:
    st.success(f"≈öredni poziom dojrza≈Ço≈õci w obszarze '{obszar}' jest wysoki. Dobra robota!")
