import streamlit as st
import pandas as pd
import numpy as np
import io
import os
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.types import Float

# Konfiguracja po≈ÇƒÖczenia z bazƒÖ danych
DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    DATABASE_URL = "postgresql://user:password@host:port/database"  # ZastƒÖp danymi lokalnymi

engine = create_engine(DATABASE_URL, pool_pre_ping=True) # Dodano pool_pre_ping
Base = declarative_base()

# Definicja modelu danych dla zagro≈ºe≈Ñ
class Zagrozenie(Base):
    __tablename__ = "zagrozenia"

    id = Column(Integer, primary_key=True)
    zagrozenie = Column(String)
    prawdopodobienstwo = Column(Integer)
    wplyw = Column(Integer)
    poziom_ryzyka = Column(Integer)
    klasyfikacja = Column(String)

# Definicja modelu danych dla ISO 9126
class ISO9126Ocena(Base):
    __tablename__ = "iso9126_oceny"

    id = Column(Integer, primary_key=True)
    funkcjonalnosc = Column(Integer)
    niezawodnosc = Column(Integer)
    uzytecznosc = Column(Integer)
    efektywnosc = Column(Integer)
    utrzymywalnosc = Column(Integer)
    przenosnosc = Column(Integer)

# Definicja modelu danych dla ISO 27001
class ISO27001Ocena(Base):
    __tablename__ = "iso27001_oceny"

    id = Column(Integer, primary_key=True)
    obszar = Column(String)
    polityka_bezpieczenstwa_informacji = Column(Integer)
    organizacja_bezpieczenstwa_informacji = Column(Integer)
    zarzadzanie_zasobami = Column(Integer)
    bezpieczenstwo_zasobow_ludzkich = Column(Integer)

# Utworzenie tabel w bazie danych
Base.metadata.create_all(engine)

# Inicjalizacja sesji
Session = sessionmaker(bind=engine)
session = Session()

st.set_page_config(page_title="Analiza ryzyka", layout="wide")
st.title("üîê Analiza ryzyka system√≥w teleinformatycznych")

# Funkcja klasyfikujƒÖca poziom ryzyka
def klasyfikuj_ryzyko(poziom):
    if poziom <= 6:
        return "Niskie"
    elif poziom <= 14:
        return "≈örednie"
    else:
        return "Wysokie"

# Pobranie danych z bazy danych lub domy≈õlne
def get_zagrozenia_from_db():
    try:
        zagrozenia = session.query(Zagrozenie).all()
        if zagrozenia:
            return pd.DataFrame([{
                'Zagro≈ºenie': z.zagrozenie,
                'Prawdopodobie≈Ñstwo': z.prawdopodobienstwo,
                'Wp≈Çyw': z.wplyw,
                'Poziom ryzyka': z.poziom_ryzyka,
                'Klasyfikacja': z.klasyfikacja
            } for z in zagrozenia])
        else:
            return pd.DataFrame(default_risks)
    except Exception as e:
        st.error(f"B≈ÇƒÖd po≈ÇƒÖczenia z bazƒÖ danych: {e}")
        return pd.DataFrame(default_risks)

# Domy≈õlna lista zagro≈ºe≈Ñ
default_risks = [
    {"Zagro≈ºenie": "Awaria serwera", "Prawdopodobie≈Ñstwo": 4, "Wp≈Çyw": 5, "Poziom ryzyka": 20, "Klasyfikacja": "Wysokie"},
    {"Zagro≈ºenie": "Atak DDoS", "Prawdopodobie≈Ñstwo": 3, "Wp≈Çyw": 4, "Poziom ryzyka": 12, "Klasyfikacja": "≈örednie"},
    {"Zagro≈ºenie": "B≈ÇƒÖd ludzki", "Prawdopodobie≈Ñstwo": 5, "Wp≈Çyw": 3, "Poziom ryzyka": 15, "Klasyfikacja": "Wysokie"},
    {"Zagro≈ºenie": "Utrata zasilania", "Prawdopodobie≈Ñstwo": 2, "Wp≈Çyw": 2, "Poziom ryzyka": 4, "Klasyfikacja": "Niskie"}
]

# Wczytanie danych do sesji
if "df" not in st.session_state:
    st.session_state.df = get_zagrozenia_from_db()

# Zapisywanie danych do bazy danych
def save_zagrozenia_to_db(df):
    try:
        session.query(Zagrozenie).delete()  # Usu≈Ñ istniejƒÖce dane
        for index, row in df.iterrows():
            zagrozenie = Zagrozenie(
                zagrozenie=row['Zagro≈ºenie'],
                prawdopodobienstwo=row['Prawdopodobie≈Ñstwo'],
                wplyw=row['Wp≈Çyw'],
                poziom_ryzyka=row['Poziom ryzyka'],
                klasyfikacja=row['Klasyfikacja']
            )
            session.add(zagrozenie)
        session.commit()
        st.success("Dane zagro≈ºe≈Ñ zapisane do bazy danych.")
    except Exception as e:
        session.rollback()
        st.error(f"B≈ÇƒÖd zapisu do bazy danych: {e}")

# ‚ûï Dodawanie nowego ryzyka
st.subheader("‚ûï Dodaj nowe zagro≈ºenie")
with st.form("add_risk_form"):
    name = st.text_input("Opis zagro≈ºenia")
    prob = st.slider("Prawdopodobie≈Ñstwo (1-5)", 1, 5, 3)
    impact = st.slider("Wp≈Çyw (1-5)", 1, 5, 3)
    submitted = st.form_submit_button("Dodaj")

    if submitted and name.strip() != "":
        new_row = {"Zagro≈ºenie": name, "Prawdopodobie≈Ñstwo": prob, "Wp≈Çyw": impact}
        new_row["Poziom ryzyka"] = new_row["Prawdopodobie≈Ñstwo"] * new_row["Wp≈Çyw"]
        new_row["Klasyfikacja"] = klasyfikuj_ryzyko(new_row["Poziom ryzyka"])
        st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([new_row])], ignore_index=True)
        st.success("Zagro≈ºenie dodane.")

# ‚úèÔ∏è Edytuj ryzyka w interaktywnej tabeli
st.subheader("‚úèÔ∏è Edytuj macierz ryzyka")
edited_df = st.data_editor(
    st.session_state.df,
    num_rows="dynamic",
    use_container_width=True,
    key="risk_editor"
)

# Zapisz zmodyfikowanƒÖ tabelƒô do sesji
st.session_state.df = edited_df.copy()

# Oblicz poziom ryzyka i klasyfikacjƒô
st.session_state.df["Poziom ryzyka"] = st.session_state.df["Prawdopodobie≈Ñstwo"] * st.session_state.df["Wp≈Çyw"]
st.session_state.df["Klasyfikacja"] = st.session_state.df["Poziom ryzyka"].apply(klasyfikuj_ryzyko)

# üìã Filtrowanie
st.subheader("üìã Filtruj wed≈Çug poziomu ryzyka")
filt = st.radio("Poka≈º:", ["Wszystkie", "Niskie", "≈örednie", "Wysokie"], horizontal=True)

if filt != "Wszystkie":
    df_filtered = st.session_state.df[st.session_state.df["Klasyfikacja"] == filt]
else:
    df_filtered = st.session_state.df

# üé® Kolorowanie
def koloruj(val):
    if val == "Niskie":
        return "background-color: #d4edda"
    elif val == "≈örednie":
        return "background-color: #fff3cd"
    elif val == "Wysokie":
        return "background-color: #f8d7da"
    return ""

# üìä Wy≈õwietlenie
st.subheader("üìä Macierz ryzyka")
st.dataframe(
    df_filtered.style.applymap(koloruj, subset=["Klasyfikacja"]),
    use_container_width=True
)

# üì• Eksport do CSV
st.subheader("üì• Eksportuj dane")
if st.button("Eksportuj do CSV"):
    # Przygotowanie DataFrame do eksportu
    df_export = st.session_state.df.copy()
    
    csv = df_export.to_csv(index=False, encoding='utf-8', sep=';')
    st.download_button(
        label="Pobierz plik CSV",
        data=csv,
        file_name='zagrozenia.csv',
        mime='text/csv',
    )

# Zapisz zmiany w bazie danych
if st.button("Zapisz zmiany w bazie danych"):
    save_zagrozenia_to_db(st.session_state.df)

# ---------------------------------------------------------------------
# Modu≈Ç ISO/IEC 9126 - Ankieta
# ---------------------------------------------------------------------
st.header("üìä Modu≈Ç ISO/IEC 9126 - Ocena Jako≈õci Oprogramowania")

cechy_jakosci = {
    "Funkcjonalno≈õƒá": "Stopie≈Ñ, w jakim oprogramowanie spe≈Çnia okre≈õlone potrzeby u≈ºytkownika.",
    "Niezawodno≈õƒá": "Zdolno≈õƒá oprogramowania do utrzymania okre≈õlonego poziomu wydajno≈õci.",
    "U≈ºyteczno≈õƒá": "≈Åatwo≈õƒá u≈ºywania oprogramowania przez u≈ºytkownik√≥w.",
    "Efektywno≈õƒá": "Zasoby (czas, energia), jakie oprogramowanie zu≈ºywa podczas wykonywania zada≈Ñ.",
    "Utrzymywalno≈õƒá": "≈Åatwo≈õƒá modyfikowania, naprawiania i ulepszania oprogramowania.",
    "Przeno≈õno≈õƒá": "Zdolno≈õƒá oprogramowania do dzia≈Çania w r√≥≈ºnych ≈õrodowiskach."
}

# Inicjalizacja stanu sesji dla ocen
if "oceny" not in st.session_state:
    # Spr√≥buj pobraƒá z bazy danych, je≈õli nie ma, ustaw domy≈õlne
    try:
        ocena_z_bazy = session.query(ISO9126Ocena).first()
        if ocena_z_bazy:
                st.session_state.oceny = {
                "Funkcjonalno≈õƒá": ocena_z_bazy.funkcjonalnosc,
                "Niezawodno≈õƒá": ocena_z_bazy.niezawodnosc,
                "U≈ºyteczno≈õƒá": ocena_z_bazy.uzytecznosc,
                "Efektywno≈õƒá": ocena_z_bazy.efektywnosc,
                "Utrzymywalno≈õƒá": ocena_z_bazy.utrzymywalnosc,
                "Przeno≈õno≈õƒá": ocena_z_bazy.przenosnosc,
            }
        else:
            st.session_state.oceny = {cecha: 3 for cecha in cechy_jakosci}
    except:
        st.session_state.oceny = {cecha: 3 for cecha in cechy_jakosci}

st.subheader("Oce≈Ñ system (1-5) dla ka≈ºdej cechy:")
for cecha, opis in cechy_jakosci.items():
    st.write(f"**{cecha}**: {opis}")
    st.session_state.oceny[cecha] = st.slider(f"Ocena {cecha} (1-5)", 1, 5, st.session_state.oceny[cecha])

# Obliczenie ≈õrednich
srednie_oceny = {cecha: st.session_state.oceny[cecha] for cecha in cechy_jakosci}
df_oceny = pd.DataFrame([srednie_oceny])

st.subheader("Wyniki oceny:")
st.dataframe(df_oceny)
# ---------------------------------------------------------------------
# Modu≈Ç ISO/IEC 9126 - Ankieta
# ---------------------------------------------------------------------
st.header("üìä Modu≈Ç ISO/IEC 9126 - Ocena Jako≈õci Oprogramowania")

cechy_jakosci = {
    "Funkcjonalno≈õƒá": "Stopie≈Ñ, w jakim oprogramowanie spe≈Çnia okre≈õlone potrzeby u≈ºytkownika.",
    "Niezawodno≈õƒá": "Zdolno≈õƒá oprogramowania do utrzymania okre≈õlonego poziomu wydajno≈õci.",
    "U≈ºyteczno≈õƒá": "≈Åatwo≈õƒá u≈ºywania oprogramowania przez u≈ºytkownik√≥w.",
    "Efektywno≈õƒá": "Zasoby (czas, energia), jakie oprogramowanie zu≈ºywa podczas wykonywania zada≈Ñ.",
    "Utrzymywalno≈õƒá": "≈Åatwo≈õƒá modyfikowania, naprawiania i ulepszania oprogramowania.",
    "Przeno≈õno≈õƒá": "Zdolno≈õƒá oprogramowania do dzia≈Çania w r√≥≈ºnych ≈õrodowiskach."
}

# Inicjalizacja stanu sesji dla ocen
if "oceny" not in st.session_state:
    # Spr√≥buj pobraƒá z bazy danych, je≈õli nie ma, ustaw domy≈õlne
    try:
        ocena_z_bazy = session.query(ISO9126Ocena).first()
        if ocena_z_bazy:
            st.session_state.oceny = {
                "Funkcjonalno≈õƒá": ocena_z_bazy.funkcjonalnosc,
                "Niezawodno≈õƒá": ocena_z_bazy.niezawodnosc,
                "U≈ºyteczno≈õƒá": ocena_z_bazy.uzytecznosc,
                "Efektywno≈õƒá": ocena_z_bazy.efektywnosc,
                "Utrzymywalno≈õƒá": ocena_z_bazy.utrzymywalnosc,
                "Przeno≈õno≈õƒá": ocena_z_bazy.przenosnosc,
            }
        else:
            st.session_state.oceny = {cecha: 3 for cecha in cechy_jakosci}
    except Exception as e:
        st.error(
            f"B≈ÇƒÖd pobierania ocen ISO9126 z bazy danych: {e}, ustawiam warto≈õci domy≈õlne.")  # Obs≈Çuga b≈Çƒôdu
        st.session_state.oceny = {cecha: 3 for cecha in cechy_jakosci}

st.subheader("Oce≈Ñ system (1-5) dla ka≈ºdej cechy:")
for cecha, opis in cechy_jakosci.items():
    st.write(f"**{cecha}**: {opis}")
    st.session_state.oceny[cecha] = st.slider(f"Ocena {cecha} (1-5)", 1, 5,
                                                st.session_state.oceny[cecha])

# Obliczenie ≈õrednich
srednie_oceny = {cecha: st.session_state.oceny[cecha] for cecha in cechy_jakosci}
df_oceny = pd.DataFrame([srednie_oceny])

st.subheader("Wyniki oceny:")
st.dataframe(df_oceny)

# Interpretacja wynik√≥w
st.subheader("Interpretacja:")
interpretacje = {
    "Funkcjonalno≈õƒá": {
        1: "Funkcjonalno≈õƒá wymaga znacznych poprawek.",
        3: "Funkcjonalno≈õƒá jest zadowalajƒÖca, ale jest miejsce na ulepszenia.",
        5: "Funkcjonalno≈õƒá jest na bardzo wysokim poziomie."
    },
    "Niezawodno≈õƒá": {
        1: "Niezawodno≈õƒá jest bardzo niska.",
        3: "Niezawodno≈õƒá jest na ≈õrednim poziomie.",
        5: "Niezawodno≈õƒá jest bardzo wysoka."
    },
    "U≈ºyteczno≈õƒá": {
        1: "U≈ºyteczno≈õƒá wymaga znacznych poprawek.",
        3: "U≈ºyteczno≈õƒá jest zadowalajƒÖca.",
        5: "U≈ºyteczno≈õƒá jest bardzo wysoka."
    },
    "Efektywno≈õƒá": {
        1: "Efektywno≈õƒá jest bardzo niska.",
        3: "Efektywno≈õƒá jest na ≈õrednim poziomie.",
        5: "Efektywno≈õƒá jest bardzo wysoka."
    },
    "Utrzymywalno≈õƒá": {
        1: "Utrzymywalno≈õƒá jest bardzo niska.",
        3: "Utrzymywalno≈õƒá jest na ≈õrednim poziomie.",
        5: "Utrzymywalno≈õƒá jest bardzo wysoka."
    },
    "Przeno≈õno≈õƒá": {
        1: "Przeno≈õno≈õƒá jest bardzo niska.",
        3: "Przeno≈õno≈õƒá jest na ≈õrednim poziomie.",
        5: "Przeno≈õno≈õƒá jest bardzo wysoka."
    }
}

for cecha, ocena in st.session_state.oceny.items():
    if ocena <= 2:
        st.warning(f"{cecha}: {interpretacje[cecha][1]}")
    elif ocena <= 4:
        st.info(f"{cecha}: {interpretacje[cecha][3]}")
    else:
        st.success(f"{cecha}: {interpretacje[cecha][5]}")
